<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[How to fix 'Zip PHP extension is not installed' when creating new Laravel Project]]></title>
    <url>%2F2019%2F11%2F07%2FZip%2F</url>
    <content type="text"><![CDATA[Recently when I was trying to create a new project with Laravel installer’s command Laravel new in macOS Catalina, an error The Zip PHP extension is not installed. Please install it and try again. occurred and terminated to create the new project. To solve this error, you need to reinstall PHP 7.3 with Home-brew by running the command below: 123brew updatebrew install php@7.3brew link php@7.3 Then reload your console and use PHP -m command to check if the zip extension has been installed]]></content>
  </entry>
  <entry>
    <title><![CDATA[Build a 2D game with photo/gesture recognition by Tensor Flow JS and Pixi JS - Part 2]]></title>
    <url>%2F2019%2F10%2F06%2FBuild-a-2D-game-with-photo-gesture-recognition-by-Tensor-Flow-JS-and-Pixi-JS-Part-2%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Build an automation test system with Jenkins and Selenium 2]]></title>
    <url>%2F2019%2F09%2F29%2FSelenium-and-Jenkins%2F</url>
    <content type="text"><![CDATA[​ Selenium is a popular framework for testing web applications. The 2.0 of Selenium included WebDriver API, which is a simpler compact object-oriented API to use on Web UI testing. This blog is going to introduce how to build a basic web automation testing program using Python 3 &amp; Selenium and deployed it on Jenkins. Install selenium and driverExecuting the command below to install selenium in your local environment 1pip install -U selenium Next, you can download the Chrome driver in here, you can also find other drivers for Edge/Firefox/Safari in this page. After downloading the driver, place it in your in /usr/bin or /usr/local/bin. Write a test caseThis tutorial is going to testing Google’s search bar as an example. First, we create a Python file calls ‘base.py’. It will initiate the Chrome driver and using Python’s standard unit test library. 123456789101112131415import unittestfrom selenium import webdriverclass TestCase(unittest.TestCase): #Setup broswer and open https://www.google.com/ def setUp(self): global driver driver = webdriver.Chrome() self.driver = driver self.driver.get(“https://www.google.com/&quot;) #After ran all test cases, the browser will close def tearDown(self): self.driver.close() Now we need to create another Python file calls ‘Google_test.py’, it going to all the test cases. 123456789101112131415161718import unittestimport basefrom selenium.webdriver.common.keys import Keysfrom selenium.common.exceptions import NoSuchElementExceptionclass GoogleTest(base.TestCase): def test_google_search(self): driver = base.driver try: elem = driver.find_element_by_name(‘q’) elem.send_keys(‘python’ + Keys.ENTER) except NoSuchElementException: print (‘Something is wrong’)if name == “main“: unittest.main() Execute python3 Google_test.py in your terminal to run the test code; you should see the output like below: 1234———————————————————————-Ran 1 test in 5.731sOK Install Jenkins and pluginsJenkins is an open source automation server, and we will going to install and host it in our local server. You can download Jenkins for Mac in here, after installing Jenkins, cd to the Jenkins folder by your terminal and execute the code below. 1java -jar jenkins.war –httpPort=8080 Now the Jenkins is hosting in your local server, browse it in http://localhost:8080. After you logged in to Jenkins, you need to download a few plugins to support selenium web test. Click manage Jenkins in the left-side bar and click manage plugin, and download chrome driver + selenium plugin + spinning panda plugin into your Jenkins. Schedule script and runNow click New item to create a new Freestyle Project After the project created, you are going to the configuration page. Go to the build section and add a Python builder, choose the Nature as Shell and input the command like below: Python3 python3 root path/Google_test.py The selenium test is set up with Jenkins; now you can go to your project page and click Build now to run your test code. If you want to schedule your code automatically running every day, go to the configuration page and choose ‘Build periodically’. Then input the time you want it run, for example, 00 7 * means to run the test every day 7 am. ​ ​]]></content>
  </entry>
  <entry>
    <title><![CDATA[Build a 2D game with photo/gesture recognition by Tensor Flow JS and Pixi JS - Part 1]]></title>
    <url>%2F2019%2F09%2F29%2FBuild-a-2D-game-with-photo-gesture-recognition-by-Tensor-Flow-JS-and-Pixi-JS%2F</url>
    <content type="text"><![CDATA[TensorFlow.js is an open-source library we can use to train and run machine learning models in the browser by using Javascript and API. In this and next two upcoming blogs, I’ll demonstrate how to use TF.js and Pixi.js(a javascript library can build game can run in the web browser) to build a 2D game and control the character by gesture/photo recognition through the camera. In this blog, we’ll try out TF.js and Pixi.js by using their official demos. Tensorflow.js DemoGoogle prepared this demo page with several TF.js application. Let’s try the Pac-Man webcam controller application since we’ll build a gesture/photo recognition application later. Pixi.js DemoPixi.js also has a demo page to demonstrate all the functionalities of this library. Feel free to try them, or you can learn the basic of Pixi.js in here. In the next blog, I’ll show you how to build a basic Pixi application with simple interaction.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Oracle 12c enterprise edition Installation on Mac Mojave with Docker]]></title>
    <url>%2F2019%2F03%2F12%2FDocker%2F</url>
    <content type="text"><![CDATA[Recently I started using Oracle database 12c enterprise edition. Instead of using a virtual machine I choose to use Docker to install the Oracle database in MacOs Mojave. I’m going to introduce how to do that in a few simple steps below. 1. Install dockerDocker is a tool we can create, deploy and run applications by using containers. Docker containers is launched by running an image, which is an executable package contains everything you need to run an application. For example, the Oracle database we are going to install in the docker later is an image provided by Oracle company. Install docker is very easy; all you need to do register a docker account and download Docker for Mac. After installed docker in your Mac, use the account you registered earlier to sign in. 2. Install Oracle database in dockerThe Oracle database 12C(12.2.0.1) enterprise edition is available in Docker hub, and you can get the image running on Oracle Linux 7 in the here. After you got the image from docker hub, run the code below in terminal to pull/download the image into your local machine. 1docker pull store/oracle/database-enterprise:12.2.0.1 It might ask your credentials for the first time, input your docker username and password. Then use docker image ls to list the image you pulled, the output should looks like below: 12RREPOSITORY TAG IMAGE ID CREATED SIZE store/oracle/database-enterprise 12.2.0.1 12a359cd0528 19 months ago 3.44GB Now excuting the code below to start an Oracle database server instance: 1docker run -d -p 8080:8080 -p 1521:1521 --name OracleDB store/oracle/database-enterprise:12.2.0.1 (You can replace ‘OracleDB’ to the name you want for the database.) Wait one minute then run docker ps in your terminal; you should see the container is running and status column shows ‘healthy’ like below. Otherwise, wait for few minutes then run docker ps again. 12CONTAINER ID IMAGE CREATED STATUS 2065c157d818 store/oracle/database-enterprise:12.2.0.1 3 days ago Up 2 days (healthy) The Oracle database is successfully running in your Mac now, now let us create a sample table and a database administrator account for it. Execute the query below to connect the database first. 1docker exec -it OracleDB bash -c "source /home/oracle/.bashrc; sqlplus /nolog" The output from your terminal should looks likes below: 1SQL*Plus: Release 12.2.0.1.0 Production on Wed Mar 13 01:55:16 2019 Copyright (c) 1982, 2016, Oracle. All rights reserved. Now execute the query below to create a new database administrator account and a sample table. 123456789conn sys as sysdba;-- Now enter the password as 'Oradoc_db1'alter session set "_ORACLE_SCRIPT"=true;-- Create a new user name is 'DBadmin', and password is 'DBadmin'create user DBadmin identified by DBadmin;-- Grant privilege to DBadminGRANT CONNECT, RESOURCE, DBA TO DBadmin;--Create a sample table.create table Sample (id int,name varchar2(20)); Now the account and table are created, you can use SELECT USERNAME FROM DBA_USERS; to check. 3. Connect database with SQLDeveloperSQLDeveloper is an integrated development environment for working with SQL in Oracle databases with GUI; you can download it from here. After installed SQLDeveloper, click the green plus symbol in the left-top hand side to create a new connection. Use the information below to connect: Connection name Username Password Hostname Port Service name OracleDB DBadmin DBadmin localhost 1521 ORCLCDB.localdomain If the service name is wrong, try to execute select value from v$parameter where name=&#39;service_names&#39;; in the terminal to get the correct service name.]]></content>
  </entry>
</search>
